#version 450
layout(binding = 0) buffer Output {
   uint outputValues[ ];
};

layout(binding = 1, rgba8) uniform image2D values;

layout(binding = 2, rgba8) uniform readonly image2D filterValues;

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout (constant_id = 0) const uint BUFFER_ELEMENTS = 32;

void main() 
{
	uint index = gl_GlobalInvocationID.x;
    int acc = 0;

	        for (int row = 0; row < 4; ++row) {
				for (int col = 0; col < 8; ++col) {
					vec4 rgba = imageLoad(values,ivec2(row, col)).rgba;
					acc += int(rgba.r+rgba.g+rgba.b+rgba.a);
					
				}
	        }

	        for (int row = 0; row < 8; ++row) {
				for (int col = 0; col < 4; ++col) {
					vec4 rgba = imageLoad(values,ivec2(row, col)).rgba;
					acc += int(rgba.r+rgba.g+rgba.b+rgba.a);
					
				}
	        }
	outputValues[index] = acc;
	//if (index >= BUFFER_ELEMENTS) 
	//	return;	
    //vec4 rgba = imageLoad(values,ivec2(gl_GlobalInvocationID.xy)).rgba;
    //vec4 drgba = imageLoad(filterValues,ivec2(gl_GlobalInvocationID.xy)).rgba;
    //imageStore(values,  100;
    //imageStore(values, ivec2(0,0), vec4(222,111,112,113));
    //vec4 rgba = imageLoad(values,ivec2(0,0)).rgba;
    //outputValues[index] = int(rgba.r+rgba.g+rgba.b+rgba.a);;
    //outputValues[index] = int(rgba.r+rgba.g+rgba.b+rgba.a)+int(drgba.r+drgba.g+drgba.b+drgba.a);
	//outputValues[index] = int(imageLoad(values,ivec2(gl_GlobalInvocationID.xy)).r);// + int(imageLoad(filterValues,ivec2(gl_GlobalInvocationID.xy)));
}

